// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "FileReceiver.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

#include <iostream>
#include <fstream>
#include <string>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace std;

class FileReceiverHandler : virtual public FileReceiverIf {
public:
    FileReceiverHandler()
    {
        // Your initialization goes here
    }

    void ping()
    {
        // Your implementation goes here
        printf("ping\n");
    }

    void GetFile(FileChunk& _return, const std::string& fileName)
    {
    // Open file in binary mod
        ifstream file (fileName, std::ios_base::ate | std::ios_base::binary);
        if(!file)
        {
            cout << "File can`t be opened." << endl;
            return;
        }

        std::vector<char> buf;
        std::fstream::pos_type fileSize = file.tellg();             // Get number of bytes in file
        file.seekg(0, std::ios_base::beg);                          // Set pointer to the begining of file
        buf.resize(fileSize);
        file.read(&buf[0], fileSize);                               // Read file in buffer
        file.close();
        std::string buffer(buf.begin(), buf.end());

        _return.__set_fileName(fileName);
        _return.__set_fileFormat("bash script");
        _return.__set_data(buffer);
        _return.__set_hash("Vot tebe hash");
        _return.__set_isExecutable(true);

        printf("GetFile\n");
    }

    void GetTask(Task& _return)
    {
        // Your implementation goes here
        printf("GetTask\n");
    }

    bool SendResult(const FileChunk& result)
    {
        // Your implementation goes here
        printf("SendResult\n");
    }

};

int main(int argc, char **argv) {
    int port = 9090;
    ::apache::thrift::stdcxx::shared_ptr<FileReceiverHandler> handler(new FileReceiverHandler());
    ::apache::thrift::stdcxx::shared_ptr<TProcessor> processor(new FileReceiverProcessor(handler));
    ::apache::thrift::stdcxx::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
    ::apache::thrift::stdcxx::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
    ::apache::thrift::stdcxx::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

    TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
    server.serve();
    return 0;
}

