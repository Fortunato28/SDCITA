/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef FileReceiver_H
#define FileReceiver_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "description_for_thrift_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class FileReceiverIf {
 public:
  virtual ~FileReceiverIf() {}
  virtual void ping() = 0;
  virtual void GetFile(FileChunk& _return, const std::string& fileName) = 0;
  virtual void GetTask(Task& _return) = 0;
  virtual bool SendResult(const FileChunk& result) = 0;
};

class FileReceiverIfFactory {
 public:
  typedef FileReceiverIf Handler;

  virtual ~FileReceiverIfFactory() {}

  virtual FileReceiverIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(FileReceiverIf* /* handler */) = 0;
};

class FileReceiverIfSingletonFactory : virtual public FileReceiverIfFactory {
 public:
  FileReceiverIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<FileReceiverIf>& iface) : iface_(iface) {}
  virtual ~FileReceiverIfSingletonFactory() {}

  virtual FileReceiverIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(FileReceiverIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<FileReceiverIf> iface_;
};

class FileReceiverNull : virtual public FileReceiverIf {
 public:
  virtual ~FileReceiverNull() {}
  void ping() {
    return;
  }
  void GetFile(FileChunk& /* _return */, const std::string& /* fileName */) {
    return;
  }
  void GetTask(Task& /* _return */) {
    return;
  }
  bool SendResult(const FileChunk& /* result */) {
    bool _return = false;
    return _return;
  }
};


class FileReceiver_ping_args {
 public:

  FileReceiver_ping_args(const FileReceiver_ping_args&);
  FileReceiver_ping_args& operator=(const FileReceiver_ping_args&);
  FileReceiver_ping_args() {
  }

  virtual ~FileReceiver_ping_args() throw();

  bool operator == (const FileReceiver_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FileReceiver_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileReceiver_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FileReceiver_ping_pargs {
 public:


  virtual ~FileReceiver_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FileReceiver_ping_result {
 public:

  FileReceiver_ping_result(const FileReceiver_ping_result&);
  FileReceiver_ping_result& operator=(const FileReceiver_ping_result&);
  FileReceiver_ping_result() {
  }

  virtual ~FileReceiver_ping_result() throw();

  bool operator == (const FileReceiver_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FileReceiver_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileReceiver_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FileReceiver_ping_presult {
 public:


  virtual ~FileReceiver_ping_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FileReceiver_GetFile_args__isset {
  _FileReceiver_GetFile_args__isset() : fileName(false) {}
  bool fileName :1;
} _FileReceiver_GetFile_args__isset;

class FileReceiver_GetFile_args {
 public:

  FileReceiver_GetFile_args(const FileReceiver_GetFile_args&);
  FileReceiver_GetFile_args& operator=(const FileReceiver_GetFile_args&);
  FileReceiver_GetFile_args() : fileName() {
  }

  virtual ~FileReceiver_GetFile_args() throw();
  std::string fileName;

  _FileReceiver_GetFile_args__isset __isset;

  void __set_fileName(const std::string& val);

  bool operator == (const FileReceiver_GetFile_args & rhs) const
  {
    if (!(fileName == rhs.fileName))
      return false;
    return true;
  }
  bool operator != (const FileReceiver_GetFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileReceiver_GetFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FileReceiver_GetFile_pargs {
 public:


  virtual ~FileReceiver_GetFile_pargs() throw();
  const std::string* fileName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileReceiver_GetFile_result__isset {
  _FileReceiver_GetFile_result__isset() : success(false) {}
  bool success :1;
} _FileReceiver_GetFile_result__isset;

class FileReceiver_GetFile_result {
 public:

  FileReceiver_GetFile_result(const FileReceiver_GetFile_result&);
  FileReceiver_GetFile_result& operator=(const FileReceiver_GetFile_result&);
  FileReceiver_GetFile_result() {
  }

  virtual ~FileReceiver_GetFile_result() throw();
  FileChunk success;

  _FileReceiver_GetFile_result__isset __isset;

  void __set_success(const FileChunk& val);

  bool operator == (const FileReceiver_GetFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FileReceiver_GetFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileReceiver_GetFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileReceiver_GetFile_presult__isset {
  _FileReceiver_GetFile_presult__isset() : success(false) {}
  bool success :1;
} _FileReceiver_GetFile_presult__isset;

class FileReceiver_GetFile_presult {
 public:


  virtual ~FileReceiver_GetFile_presult() throw();
  FileChunk* success;

  _FileReceiver_GetFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class FileReceiver_GetTask_args {
 public:

  FileReceiver_GetTask_args(const FileReceiver_GetTask_args&);
  FileReceiver_GetTask_args& operator=(const FileReceiver_GetTask_args&);
  FileReceiver_GetTask_args() {
  }

  virtual ~FileReceiver_GetTask_args() throw();

  bool operator == (const FileReceiver_GetTask_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FileReceiver_GetTask_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileReceiver_GetTask_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FileReceiver_GetTask_pargs {
 public:


  virtual ~FileReceiver_GetTask_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileReceiver_GetTask_result__isset {
  _FileReceiver_GetTask_result__isset() : success(false) {}
  bool success :1;
} _FileReceiver_GetTask_result__isset;

class FileReceiver_GetTask_result {
 public:

  FileReceiver_GetTask_result(const FileReceiver_GetTask_result&);
  FileReceiver_GetTask_result& operator=(const FileReceiver_GetTask_result&);
  FileReceiver_GetTask_result() {
  }

  virtual ~FileReceiver_GetTask_result() throw();
  Task success;

  _FileReceiver_GetTask_result__isset __isset;

  void __set_success(const Task& val);

  bool operator == (const FileReceiver_GetTask_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FileReceiver_GetTask_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileReceiver_GetTask_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileReceiver_GetTask_presult__isset {
  _FileReceiver_GetTask_presult__isset() : success(false) {}
  bool success :1;
} _FileReceiver_GetTask_presult__isset;

class FileReceiver_GetTask_presult {
 public:


  virtual ~FileReceiver_GetTask_presult() throw();
  Task* success;

  _FileReceiver_GetTask_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FileReceiver_SendResult_args__isset {
  _FileReceiver_SendResult_args__isset() : result(false) {}
  bool result :1;
} _FileReceiver_SendResult_args__isset;

class FileReceiver_SendResult_args {
 public:

  FileReceiver_SendResult_args(const FileReceiver_SendResult_args&);
  FileReceiver_SendResult_args& operator=(const FileReceiver_SendResult_args&);
  FileReceiver_SendResult_args() {
  }

  virtual ~FileReceiver_SendResult_args() throw();
  FileChunk result;

  _FileReceiver_SendResult_args__isset __isset;

  void __set_result(const FileChunk& val);

  bool operator == (const FileReceiver_SendResult_args & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const FileReceiver_SendResult_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileReceiver_SendResult_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FileReceiver_SendResult_pargs {
 public:


  virtual ~FileReceiver_SendResult_pargs() throw();
  const FileChunk* result;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileReceiver_SendResult_result__isset {
  _FileReceiver_SendResult_result__isset() : success(false) {}
  bool success :1;
} _FileReceiver_SendResult_result__isset;

class FileReceiver_SendResult_result {
 public:

  FileReceiver_SendResult_result(const FileReceiver_SendResult_result&);
  FileReceiver_SendResult_result& operator=(const FileReceiver_SendResult_result&);
  FileReceiver_SendResult_result() : success(0) {
  }

  virtual ~FileReceiver_SendResult_result() throw();
  bool success;

  _FileReceiver_SendResult_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const FileReceiver_SendResult_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FileReceiver_SendResult_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileReceiver_SendResult_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileReceiver_SendResult_presult__isset {
  _FileReceiver_SendResult_presult__isset() : success(false) {}
  bool success :1;
} _FileReceiver_SendResult_presult__isset;

class FileReceiver_SendResult_presult {
 public:


  virtual ~FileReceiver_SendResult_presult() throw();
  bool* success;

  _FileReceiver_SendResult_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class FileReceiverClient : virtual public FileReceiverIf {
 public:
  FileReceiverClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  FileReceiverClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  void send_ping();
  void recv_ping();
  void GetFile(FileChunk& _return, const std::string& fileName);
  void send_GetFile(const std::string& fileName);
  void recv_GetFile(FileChunk& _return);
  void GetTask(Task& _return);
  void send_GetTask();
  void recv_GetTask(Task& _return);
  bool SendResult(const FileChunk& result);
  void send_SendResult(const FileChunk& result);
  bool recv_SendResult();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class FileReceiverProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<FileReceiverIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (FileReceiverProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTask(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SendResult(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  FileReceiverProcessor(::apache::thrift::stdcxx::shared_ptr<FileReceiverIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &FileReceiverProcessor::process_ping;
    processMap_["GetFile"] = &FileReceiverProcessor::process_GetFile;
    processMap_["GetTask"] = &FileReceiverProcessor::process_GetTask;
    processMap_["SendResult"] = &FileReceiverProcessor::process_SendResult;
  }

  virtual ~FileReceiverProcessor() {}
};

class FileReceiverProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  FileReceiverProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< FileReceiverIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< FileReceiverIfFactory > handlerFactory_;
};

class FileReceiverMultiface : virtual public FileReceiverIf {
 public:
  FileReceiverMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<FileReceiverIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~FileReceiverMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<FileReceiverIf> > ifaces_;
  FileReceiverMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<FileReceiverIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

  void GetFile(FileChunk& _return, const std::string& fileName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetFile(_return, fileName);
    }
    ifaces_[i]->GetFile(_return, fileName);
    return;
  }

  void GetTask(Task& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTask(_return);
    }
    ifaces_[i]->GetTask(_return);
    return;
  }

  bool SendResult(const FileChunk& result) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SendResult(result);
    }
    return ifaces_[i]->SendResult(result);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class FileReceiverConcurrentClient : virtual public FileReceiverIf {
 public:
  FileReceiverConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  FileReceiverConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  int32_t send_ping();
  void recv_ping(const int32_t seqid);
  void GetFile(FileChunk& _return, const std::string& fileName);
  int32_t send_GetFile(const std::string& fileName);
  void recv_GetFile(FileChunk& _return, const int32_t seqid);
  void GetTask(Task& _return);
  int32_t send_GetTask();
  void recv_GetTask(Task& _return, const int32_t seqid);
  bool SendResult(const FileChunk& result);
  int32_t send_SendResult(const FileChunk& result);
  bool recv_SendResult(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
