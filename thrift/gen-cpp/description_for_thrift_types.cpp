/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "description_for_thrift_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




FileChunk::~FileChunk() throw() {
}


void FileChunk::__set_fileName(const std::string& val) {
  this->fileName = val;
}

void FileChunk::__set_data(const std::string& val) {
  this->data = val;
}

void FileChunk::__set_isExecutable(const bool val) {
  this->isExecutable = val;
}

void FileChunk::__set_shippingCounter(const int64_t val) {
  this->shippingCounter = val;
}

void FileChunk::__set_fileFormat(const std::string& val) {
  this->fileFormat = val;
__isset.fileFormat = true;
}

void FileChunk::__set_hash(const std::string& val) {
  this->hash = val;
__isset.hash = true;
}
std::ostream& operator<<(std::ostream& out, const FileChunk& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t FileChunk::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_fileName = false;
  bool isset_data = false;
  bool isset_isExecutable = false;
  bool isset_shippingCounter = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fileName);
          isset_fileName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->data);
          isset_data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isExecutable);
          isset_isExecutable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->shippingCounter);
          isset_shippingCounter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fileFormat);
          this->__isset.fileFormat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->hash);
          this->__isset.hash = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_fileName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_data)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_isExecutable)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_shippingCounter)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t FileChunk::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FileChunk");

  xfer += oprot->writeFieldBegin("fileName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->fileName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->data);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isExecutable", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->isExecutable);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("shippingCounter", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->shippingCounter);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.fileFormat) {
    xfer += oprot->writeFieldBegin("fileFormat", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->fileFormat);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.hash) {
    xfer += oprot->writeFieldBegin("hash", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeBinary(this->hash);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FileChunk &a, FileChunk &b) {
  using ::std::swap;
  swap(a.fileName, b.fileName);
  swap(a.data, b.data);
  swap(a.isExecutable, b.isExecutable);
  swap(a.shippingCounter, b.shippingCounter);
  swap(a.fileFormat, b.fileFormat);
  swap(a.hash, b.hash);
  swap(a.__isset, b.__isset);
}

FileChunk::FileChunk(const FileChunk& other0) {
  fileName = other0.fileName;
  data = other0.data;
  isExecutable = other0.isExecutable;
  shippingCounter = other0.shippingCounter;
  fileFormat = other0.fileFormat;
  hash = other0.hash;
  __isset = other0.__isset;
}
FileChunk& FileChunk::operator=(const FileChunk& other1) {
  fileName = other1.fileName;
  data = other1.data;
  isExecutable = other1.isExecutable;
  shippingCounter = other1.shippingCounter;
  fileFormat = other1.fileFormat;
  hash = other1.hash;
  __isset = other1.__isset;
  return *this;
}
void FileChunk::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FileChunk(";
  out << "fileName=" << to_string(fileName);
  out << ", " << "data=" << to_string(data);
  out << ", " << "isExecutable=" << to_string(isExecutable);
  out << ", " << "shippingCounter=" << to_string(shippingCounter);
  out << ", " << "fileFormat="; (__isset.fileFormat ? (out << to_string(fileFormat)) : (out << "<null>"));
  out << ", " << "hash="; (__isset.hash ? (out << to_string(hash)) : (out << "<null>"));
  out << ")";
}


Task::~Task() throw() {
}


void Task::__set_taskName(const std::string& val) {
  this->taskName = val;
}

void Task::__set_taskDescription(const std::string& val) {
  this->taskDescription = val;
}

void Task::__set_files(const std::vector<FileChunk> & val) {
  this->files = val;
}

void Task::__set_cmdToExec(const std::string& val) {
  this->cmdToExec = val;
}

void Task::__set_otherData(const std::string& val) {
  this->otherData = val;
__isset.otherData = true;
}

void Task::__set_estimatedLeadTime(const int64_t val) {
  this->estimatedLeadTime = val;
__isset.estimatedLeadTime = true;
}
std::ostream& operator<<(std::ostream& out, const Task& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Task::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_taskName = false;
  bool isset_taskDescription = false;
  bool isset_files = false;
  bool isset_cmdToExec = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->taskName);
          isset_taskName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->taskDescription);
          isset_taskDescription = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->files.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _etype5;
            xfer += iprot->readListBegin(_etype5, _size2);
            this->files.resize(_size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
              xfer += this->files[_i6].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_files = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cmdToExec);
          isset_cmdToExec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->otherData);
          this->__isset.otherData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->estimatedLeadTime);
          this->__isset.estimatedLeadTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_taskName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_taskDescription)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_files)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_cmdToExec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Task::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Task");

  xfer += oprot->writeFieldBegin("taskName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->taskName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("taskDescription", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->taskDescription);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("files", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->files.size()));
    std::vector<FileChunk> ::const_iterator _iter7;
    for (_iter7 = this->files.begin(); _iter7 != this->files.end(); ++_iter7)
    {
      xfer += (*_iter7).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cmdToExec", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->cmdToExec);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.otherData) {
    xfer += oprot->writeFieldBegin("otherData", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->otherData);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.estimatedLeadTime) {
    xfer += oprot->writeFieldBegin("estimatedLeadTime", ::apache::thrift::protocol::T_I64, 6);
    xfer += oprot->writeI64(this->estimatedLeadTime);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Task &a, Task &b) {
  using ::std::swap;
  swap(a.taskName, b.taskName);
  swap(a.taskDescription, b.taskDescription);
  swap(a.files, b.files);
  swap(a.cmdToExec, b.cmdToExec);
  swap(a.otherData, b.otherData);
  swap(a.estimatedLeadTime, b.estimatedLeadTime);
  swap(a.__isset, b.__isset);
}

Task::Task(const Task& other8) {
  taskName = other8.taskName;
  taskDescription = other8.taskDescription;
  files = other8.files;
  cmdToExec = other8.cmdToExec;
  otherData = other8.otherData;
  estimatedLeadTime = other8.estimatedLeadTime;
  __isset = other8.__isset;
}
Task& Task::operator=(const Task& other9) {
  taskName = other9.taskName;
  taskDescription = other9.taskDescription;
  files = other9.files;
  cmdToExec = other9.cmdToExec;
  otherData = other9.otherData;
  estimatedLeadTime = other9.estimatedLeadTime;
  __isset = other9.__isset;
  return *this;
}
void Task::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Task(";
  out << "taskName=" << to_string(taskName);
  out << ", " << "taskDescription=" << to_string(taskDescription);
  out << ", " << "files=" << to_string(files);
  out << ", " << "cmdToExec=" << to_string(cmdToExec);
  out << ", " << "otherData="; (__isset.otherData ? (out << to_string(otherData)) : (out << "<null>"));
  out << ", " << "estimatedLeadTime="; (__isset.estimatedLeadTime ? (out << to_string(estimatedLeadTime)) : (out << "<null>"));
  out << ")";
}


ClientData::~ClientData() throw() {
}


void ClientData::__set_OS(const std::string& val) {
  this->OS = val;
}

void ClientData::__set_osVersions(const std::string& val) {
  this->osVersions = val;
}

void ClientData::__set_CPU(const std::string& val) {
  this->CPU = val;
}

void ClientData::__set_timeZone(const int32_t val) {
  this->timeZone = val;
}

void ClientData::__set_clientId(const int64_t val) {
  this->clientId = val;
}

void ClientData::__set_language(const std::string& val) {
  this->language = val;
__isset.language = true;
}
std::ostream& operator<<(std::ostream& out, const ClientData& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ClientData::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_OS = false;
  bool isset_osVersions = false;
  bool isset_CPU = false;
  bool isset_timeZone = false;
  bool isset_clientId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->OS);
          isset_OS = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->osVersions);
          isset_osVersions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->CPU);
          isset_CPU = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->timeZone);
          isset_timeZone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->clientId);
          isset_clientId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->language);
          this->__isset.language = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_OS)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_osVersions)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_CPU)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_timeZone)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_clientId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ClientData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ClientData");

  xfer += oprot->writeFieldBegin("OS", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->OS);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("osVersions", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->osVersions);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CPU", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->CPU);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timeZone", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->timeZone);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("clientId", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->clientId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.language) {
    xfer += oprot->writeFieldBegin("language", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->language);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ClientData &a, ClientData &b) {
  using ::std::swap;
  swap(a.OS, b.OS);
  swap(a.osVersions, b.osVersions);
  swap(a.CPU, b.CPU);
  swap(a.timeZone, b.timeZone);
  swap(a.clientId, b.clientId);
  swap(a.language, b.language);
  swap(a.__isset, b.__isset);
}

ClientData::ClientData(const ClientData& other10) {
  OS = other10.OS;
  osVersions = other10.osVersions;
  CPU = other10.CPU;
  timeZone = other10.timeZone;
  clientId = other10.clientId;
  language = other10.language;
  __isset = other10.__isset;
}
ClientData& ClientData::operator=(const ClientData& other11) {
  OS = other11.OS;
  osVersions = other11.osVersions;
  CPU = other11.CPU;
  timeZone = other11.timeZone;
  clientId = other11.clientId;
  language = other11.language;
  __isset = other11.__isset;
  return *this;
}
void ClientData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ClientData(";
  out << "OS=" << to_string(OS);
  out << ", " << "osVersions=" << to_string(osVersions);
  out << ", " << "CPU=" << to_string(CPU);
  out << ", " << "timeZone=" << to_string(timeZone);
  out << ", " << "clientId=" << to_string(clientId);
  out << ", " << "language="; (__isset.language ? (out << to_string(language)) : (out << "<null>"));
  out << ")";
}


